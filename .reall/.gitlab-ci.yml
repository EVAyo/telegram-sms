stages:
  - build
cache:
  key: ${CI_PROJECT_ID}
  paths:
    - .gradle/

variables:
  OWNER: telegram-sms
  REPO: telegram-sms
  GIT_DEPTH: 0

build_nightly:
  image: alvrme/alpine-android:android-35-jdk17
  stage: build
  retry: 1
  only:
    - nightly
  script:
    - apk --update --no-cache add git openssl bash curl wget
    - echo -n ${KEYSTORE} | base64 -d > app/keys.jks
    # 配置 git 用户信息，这是推送 tag 的前提
    - git config --global user.email "ci-bot@telegram-sms.com"
    - git config --global user.name "GitLab CI Bot"
    - git submodule update --init --recursive
    - export RELEASE_TAG="${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}-$(date +%Y%m%d%H%M)"
    - export VERSION_CODE=${CI_PIPELINE_ID}
    - export VERSION_NAME=${RELEASE_TAG}
    - export GRADLE_USER_HOME=$(pwd)/.gradle && mkdir -p ${GRADLE_USER_HOME}
    - echo -e "org.gradle.jvmargs=-Xmx1536m\n org.gradle.parallel=true" >> ${GRADLE_USER_HOME}/gradle.properties
    - chmod +x ./gradlew
    - ./gradlew assembleRelease
    - git remote set-url origin https://${GITHUB_ACCESS_KEY}@github.com/${OWNER}/${REPO}.git
    - git push origin "${RELEASE_TAG}"
    - wget https://github.com/tcnksm/ghr/releases/download/v0.17.0/ghr_v0.17.0_linux_amd64.tar.gz
    - tar -zxvf  ghr_v0.17.0_linux_amd64.tar.gz
    - ./ghr_v0.17.0_linux_amd64/ghr -t "${GITHUB_ACCESS_KEY}" -u "${OWNER}" -r "${REPO}" -b "$(cat .reall/changelog.txt)" --prerelease "${RELEASE_TAG}" "./app/build/outputs/apk/release/"
  artifacts:
    paths:
      - app/build/outputs/apk/release/*.apk
    expire_in: 1 week

build_release:
  image: alvrme/alpine-android:android-35-jdk17
  stage: build
  retry: 2
  only:
    - master
  script:
    - apk --update --no-cache add git openssl bash curl wget
    - echo -n ${KEYSTORE} | base64 -d > app/keys.jks
    - git config --global user.email "ci-bot@telegram-sms.com"
    - git config --global user.name "GitLab CI Bot"
    - git submodule update --init --recursive
    # 对于 master 分支，我们可以用一个更干净的 tag，比如 v1.2.3
    # 这里我们先用 pipeline IID 作为版本号
    - export RELEASE_TAG="v${CI_PIPELINE_IID}"
    - export VERSION_CODE=${CI_PIPELINE_ID}
    - export VERSION_NAME=${RELEASE_TAG}
    - export GRADLE_USER_HOME=$(pwd)/.gradle && mkdir -p ${GRADLE_USER_HOME}
    - echo -e "org.gradle.jvmargs=-Xmx1536m\n org.gradle.parallel=true" >> ${GRADLE_USER_HOME}/gradle.properties
    - chmod +x ./gradlew
    - ./gradlew app:copy_language_pack
    - ./gradlew assembleRelease
    - wget https://github.com/tcnksm/ghr/releases/download/v0.17.0/ghr_v0.17.0_linux_amd64.tar.gz
    - tar -zxvf  ghr_v0.17.0_linux_amd64.tar.gz
    - ./ghr_v0.17.0_linux_amd64/ghr -t "${GITHUB_ACCESS_KEY}" -u "${OWNER}" -r "${REPO}" -b "$(cat .reall/changelog.txt)" "${RELEASE_TAG}" "./app/build/outputs/apk/release/"
    - git remote set-url origin https://${GITHUB_ACCESS_KEY}@github.com/${OWNER}/${REPO}.git
    - git push origin "${RELEASE_TAG}"
  artifacts:
    paths:
      - app/build/outputs/apk/release/*.apk
    expire_in: 1 week
