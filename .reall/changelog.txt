# Changelog

This update includes all new features, refactoring, and fixes from the `nightly` branch since the last `master` branch release. The core goals were to optimize the build process, introduce a template system, add a Carbon Copy feature, and perform a large-scale modernization of the entire application.

## 💥 Breaking Changes

### ❗ Key Breaking Changes

- **Message Format is Now Controlled by the Template System**: The format of all messages sent to Telegram (e.g., SMS, missed call notifications) is now entirely controlled by the new template system. Any external scripts or bots that rely on the old, hard-coded message format will no longer work correctly.
- **Massive Internal Code Refactoring**: The core codebase has been completely refactored from Java to Kotlin, with classes and files being renamed. This has no impact on regular users but is a major breaking change for developers who have forked the project, as merging will require significant manual adaptation.

### ⚠️ Significant Changes to Be Aware Of

- **Configuration Data Structure Change**: Due to the addition of Carbon Copy and Template features, old manual backups of configuration files may not be fully compatible with the new version. It is recommended to use the in-app QR code or cloud sync feature for configuration migration.
- **New Android Permissions**: The app will now request additional permissions such as `READ_SMS`, `WRITE_SMS`, and `RECEIVE_MMS` to support new features.
- **Side-by-Side Installation for Nightly**: The Nightly version is now installed as a separate application and will not overwrite the stable version. Users may see two app icons on their device.

## 🚀 Features

- **Carbon Copy (CC) Feature**:
  - Added a dedicated page for Carbon Copy configuration, allowing users to add and manage multiple CC services.
  - Supports fetching service configurations in HAR (HTTP Archive) format by scanning a QR code or from the cloud (using an ID and password), simplifying the setup of complex requests.
  - CC services can now be individually enabled or disabled and support sending test messages.
  - Users can granularly control which types of messages (SMS, calls, notifications, battery status) need to be carbon copied.
- **Message Template System**:
  - Introduced a brand-new template system, allowing users to customize the format of all messages sent via Telegram.
  - Provided a dedicated template editing page that intuitively displays default templates and their rendered results for different message types (e.g., received SMS, missed calls, notifications).
  - Users can modify templates at any time or restore them to their default settings.
- **Incoming Call Notifications**:
  - Added a "Notify on incoming call" option, which sends a Telegram message immediately when the phone receives a call.
- **Configuration Cloud Sync**:
  - The main app configuration or CC service configurations can now be securely uploaded to the cloud using an ID and password and easily restored on another device. All data is transmitted with AES-256-GCM encryption.

## ♻️ Refactoring & Optimization

- **Build System Modernization**:
  - **CI/CD Pipeline Refactoring**: Completely rewrote the GitLab CI scripts, providing separate build and release logic for the `nightly` and `master` branches.
  - **Side-by-Side Installation**: The Nightly version now uses a separate `applicationId` (with a `.nightly` suffix) and app name ("Telegram SMS (Nightly)"), allowing it to be installed alongside the stable version for easy testing.
  - **Improved Version Tracing**: APK filenames now include the short Git commit hash (e.g., `telegram-sms-nightly-a1b2c3d.apk`), making it extremely easy to trace each build back to its exact source code version.
  - **Gradle Script Optimization**:
    - Upgraded Android Gradle Plugin to `8.13.0` and Gradle Wrapper to `8.13`.
    - Fully migrated the compilation environment to Java 17.
    - Introduced dynamic branch detection logic to automate the differentiation of build types.
- **Large-scale Codebase Modernization**:
  - **Kotlin First**: Almost all Java code in the project has been refactored into more modern and safer Kotlin code. This includes all core services, activities, and utility classes.
  - **Unified Naming Conventions**: Renamed activities, services, and receivers in the project to be clearer and more consistent (e.g., `main_activity` -> `MainActivity`).
  - **Static Class Refactoring**: Refactored scattered utility functions into logically clear singleton objects, such as `log` -> `Logs`, `network` -> `Network`, `sms` -> `SMS`, etc.
- **User Interface (UI/UX) Improvements**:
  - Added support for Android 13+ themed icons (monochrome icons).
  - Created dedicated, modern configuration pages for new features like Carbon Copy, Templates, and Blocklist.
  - Optimized some layout files for better visual consistency.
- **Documentation & Link Updates**:
  - Updated user manual links in the README to point to the new documentation site.
  - Added links for Spanish and Russian user manuals.

## 🛠️ Fixes & Dependencies

- **Permission Requests**: Added `READ_SMS`, `WRITE_SMS`, `RECEIVE_MMS`, and `RECEIVE_WAP_PUSH` permissions to `AndroidManifest.xml` to support more complete functionality.
- **Dependency Updates**:
  - `androidx.constraintlayout`: `2.1.4` -> `2.2.0`
  - `androidx.core:core-ktx`: `1.13.1` -> `1.15.0`
  - `org.jetbrains.kotlin:kotlin-stdlib-jdk8`: `1.9.25` -> `2.0.21`
  - Added modern components like `androidx.activity:activity-ktx:1.9.3` and `androidx.cardview:cardview:1.0.0`.
